version: 2.1

orbs:
  slack: circleci/slack@4.10.1

executors:
  app-executor:
    docker:
      - image: cimg/node:current
    working_directory: ~/repo
  slack-executor:
    docker:
      - image: 'cimg/base:stable'
    resource_class: small
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

commands:
  show-current-branch-name:
    steps:
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
  restore-app-cache:
    steps:
      - restore_cache:
          keys:
            - app-{{ checksum "package.json" }}
            - app-
  install-dependencies:
    steps:
      - run:
          name: Install dependencies
          command: |
            mkdir -p artifacts
            yarn install
  save-app-cache:
    steps:
      - save_cache:
          key: app-{{ checksum "package.json" }}
          paths:
            - node_modules
  install-aws-cli:
    steps:
      - run:
          name: Install AWS CLI
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install -y awscli
            sudo apt-get install -y python3-pip python build-essential
  build-project:
    steps:
      - run:
          name: Build Project
          command: |
            yarn install
            yarn run build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build successfull"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - show-current-branch-name
      - restore-app-cache
      - install-dependencies
      - save-app-cache
      - run:
          name: Copy Infrastructure Folder
          command: |
            cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  linting:
    executor: app-executor
    steps:
      - checkout
      - show-current-branch-name
      - restore-app-cache
      - run:
          name: Run Eslint
          command: yarn run lint
  prettier:
    executor: app-executor
    steps:
      - checkout
      - show-current-branch-name
      - restore-app-cache
      - run:
          name: Run prettier check
          command: yarn run prettier:check
  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - show-current-branch-name
      - run:
          name: Terraform validate & Format
          command: |
            cd infrastructure/
            terraform init -backend=false
            terraform validate
            terraform fmt -check
  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/infrastructure/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output cinemapp_bucket_name > ../cinemapp_bucket_name.txt
            terraform output cinemapp_cloudfront_distribution_id > ../cinemapp_cloudfront_distribution_id.txt
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - show-current-branch-name
      - install-aws-cli
      - build-project
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKER_NAME=$(cat artifacts/cinemapp_bucket_name.txt | sed 's/\"//g')
            echo $AWS_BUCKER_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKER_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKER_NAME} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKER_NAME} --delete
            fi
  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - show-current-branch-name
      - install-aws-cli
      - build-project
      - run:
          name: Deploy to AWS CloudFront
          command: |
            AWS_DISTRIBUTION_ID=$(cat artifacts/cinemapp_cloudfront_distribution_id.txt | sed 's/\"//g')
            echo $AWS_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_DISTRIBUTION_ID} --paths "/*"
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_DISTRIBUTION_ID} --paths "/*"
            else
              aws cloudfront create-invalidation --distribution-id ${AWS_DISTRIBUTION_ID} --paths "/*"
            fi
  notify-slack:
    executor: slack-executor
    steps:
      - run: echo "Slack Notification"
      - slack/notify:
          channel: C041GQT05GQ
          event: always
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is completed. üëç",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n${CIRCLE_BRANCH}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n${CIRCLE_BUILD_NUM}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n${CIRCLE_PROJECT_USERNAME}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - terraform-validate:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - notify-slack:
          requires:
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - main
                - staging
                - develop
